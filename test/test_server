#!/bin/bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

function fatal {
    echo >&2 "$1"
    exit 1
}

function runtime_dir {
    local dir=""
    if test -d /run; then
        dir=/run
    elif test -d /var/run; then
        dir=/var/run
    fi

    if ! test -z "$dir"; then
        dir=$dir/sc
        if test -d $dir; then
            echo -n "$dir"
            return
        fi
        if mkdir $dir 2>/dev/null; then
            echo -n "$dir"
            return
        fi
    fi

    dir=$(mktemp -d --suffix=sc 2>/dev/null) && echo -n "$dir" && return
    dir=$(mktemp -d -t sc 2>/dev/null) && echo -n "$dir" && return
    fatal "Failed to create runtime dir."
}

function create_tmpdir {
    dir=$(mktemp -d --suffix=sc 2>/dev/null) && echo -n "$dir" && return
    dir=$(mktemp -d -t sc 2>/dev/null) && echo -n "$dir" && return
    fatal "Failed to create temporary dir."
}

TCP_IP4=127.0.0.1
TCP_PORT=60721

SERVER_BIN=$SCRIPT_DIR/server
GENRECORD_BIN=$SCRIPT_DIR/generate_record
RUNTIME_DIR=$(runtime_dir)
SOCKET_FILE=$RUNTIME_DIR/server.sock
PIPE_URI=sc+pipe://$SOCKET_FILE
TCP_URI=sc+tcp://$TCP_IP4:$TCP_PORT
TMPDIR=$(create_tmpdir)
ACTUAL_PIPE_FILE=$TMPDIR/PIPE_actual.txt
ACTUAL_TCP_FILE=$TMPDIR/TCP_actual.txt
DESIRED_FILE=$TMPDIR/desired.txt

function stall { sleep 0.05; }

function wait_socket_exist {
    socket=$1
    for _ in {0..9}; do
        if [ -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket not found."
}

function wait_socket_disappear {
    socket=$1
    for _ in {0..9}; do
        if [ ! -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket didn't disappear in time."
}

function wait_start_listen {
    port=$1
    for _ in {0..9}; do
        if lsof -i:"$port"; then
            return 0
        fi
        stall
    done
    fatal "Port $port is still active."
}

function wait_stop_listen {
    port=$1
    for _ in {0..9}; do
        if ! lsof -i:"$port"; then
            return 0
        fi
        stall
    done
    fatal "Port $port is still active."
}

"$SERVER_BIN" "$PIPE_URI" "$ACTUAL_PIPE_FILE" &
SERVER_PIPE_PID=$!
wait_socket_exist "$SOCKET_FILE"

"$SERVER_BIN" "$TCP_URI" "$ACTUAL_TCP_FILE" &
SERVER_TCP_PID=$!
wait_start_listen "$TCP_PORT"

function proc_exist {
    pid=$1
    if kill -0 "$pid" 2>/dev/null; then
        return 0
    fi
    return 1
}

function wait_proc_exit {
    pid=$1
    for _ in {0..9}; do
        if ! proc_exist; then
            return 0
        fi
        stall
    done
    return 1
}

function terminate_process {
    pid=$1
    proc_exist "$pid" && kill -2 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
    proc_exist "$pid" && kill -9 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
}

function on_exit {
    terminate_process $SERVER_PIPE_PID
    terminate_process $SERVER_TCP_PID
    rm -f "$SOCKET_FILE" >/dev/null 2>&1
}
trap on_exit EXIT

function send_records {
    proto=$1
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        NC_ARGS=(-q 0)
    else
        NC_ARGS=()
    fi
    if [ "$proto" = "PIPE" ]; then
        NC_ARGS+=(-U)
        NC_DST=("$SOCKET_FILE")
    elif [ "$proto" = "TCP" ]; then
        NC_DST=("$TCP_IP4" "$TCP_PORT")
    else
        fatal "Invalid protocol."
    fi

    (
        cd "$ASSETS_DIR" >/dev/null || exit 1

        $GENRECORD_BIN print-both 0 | nc "${NC_ARGS[@]}" "${NC_DST[@]}"
        $GENRECORD_BIN print-both 3 | nc "${NC_ARGS[@]}" "${NC_DST[@]}"
        $GENRECORD_BIN print-both 22 | nc "${NC_ARGS[@]}" "${NC_DST[@]}"

        {
            $GENRECORD_BIN print-both 0
            $GENRECORD_BIN print-both 3
            $GENRECORD_BIN print-both 22
        } | nc "${NC_ARGS[@]}" "${NC_DST[@]}"
    )
}

send_records "PIPE"
send_records "TCP"

cat >"$DESIRED_FILE" <<-EOM
parse_args
server_new
server_uv_init
server_init
async_init
signal_init
signal_init
idle_init
client_init
server_bind_and_listen
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
signal_cb
async_cb
close_socket
server_on_close
server_del
EOM

terminate_process $SERVER_PIPE_PID
wait_socket_disappear "$SOCKET_FILE"

terminate_process $SERVER_TCP_PID
wait_stop_listen "$TCP_PORT"

diff "$DESIRED_FILE" "$ACTUAL_PIPE_FILE"
diff "$DESIRED_FILE" "$ACTUAL_TCP_FILE"

#!/bin/bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

function fatal {
    echo >&2 "$1"
    exit 1
}

function runtime_dir {
    local dir=""
    if test -d /run; then
        dir=/run
    elif test -d /var/run; then
        dir=/var/run
    fi

    if ! test -z "$dir"; then
        dir=$dir/sc
        if test -d $dir; then
            echo -n "$dir"
            return
        fi
        if mkdir $dir 2>/dev/null; then
            echo -n "$dir"
            return
        fi
    fi

    dir=$(mktemp -d --suffix=sc 2>/dev/null) && echo -n "$dir" && return
    dir=$(mktemp -d -t sc 2>/dev/null) && echo -n "$dir" && return
    fatal "Failed to create runtime dir."
}

SERVER_BIN=$SCRIPT_DIR/server
GENRECORD_BIN=$SCRIPT_DIR/generate_record
RUNTIME_DIR=$(runtime_dir)
SOCKET_FILE=$RUNTIME_DIR/server.sock
ACTUAL_FILE=$RUNTIME_DIR/actual.txt
DESIRED_FILE=$RUNTIME_DIR/desired.txt

stdbuf -i0 -o0 -e0 "$SERVER_BIN" "$SOCKET_FILE" >"$ACTUAL_FILE" &
SERVER_PID=$!

function stall { sleep 0.05; }

function wait_socket_exist {
    socket=$1
    for _ in {0..9}; do
        if [ -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket not found."
}

function wait_socket_disappear {
    socket=$1
    for _ in {0..9}; do
        if [ ! -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket not found."
}

wait_socket_exist "$SOCKET_FILE"

function proc_exist {
    pid=$1
    if kill -0 "$pid" 2>/dev/null; then
        return 0
    fi
    return 1
}

function wait_proc_exit {
    pid=$1
    for _ in {0..9}; do
        if ! proc_exist; then
            return 0
        fi
        stall
    done
    return 1
}

function terminate_process {
    pid=$1
    proc_exist "$pid" && kill -2 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
    proc_exist "$pid" && kill -9 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
}

function on_exit {
    terminate_process $SERVER_PID
    rm -f "$SOCKET_FILE" >/dev/null 2>&1
}
trap on_exit EXIT

if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    NC_ARGS=(-q 0 -U)
else
    NC_ARGS=(-U)
fi

(
    cd "$ASSETS_DIR" >/dev/null || exit 1

    $GENRECORD_BIN print-both 0 | nc "${NC_ARGS[@]}" "$SOCKET_FILE"
    $GENRECORD_BIN print-both 3 | nc "${NC_ARGS[@]}" "$SOCKET_FILE"
    $GENRECORD_BIN print-both 22 | nc "${NC_ARGS[@]}" "$SOCKET_FILE"

    {
        $GENRECORD_BIN print-both 0
        $GENRECORD_BIN print-both 3
        $GENRECORD_BIN print-both 22
    } | nc "${NC_ARGS[@]}" "$SOCKET_FILE"
)

cat >"$DESIRED_FILE" <<-EOM
begin -->
fetch_sock_path
server_new
server_uv_init
server_init
async_init
signal_init
signal_init
idle_init
client_init
server_bind_and_listen
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
signal_cb
async_cb
close_socket
server_on_close
server_del
<-- end
EOM

sleep 1.5
terminate_process $SERVER_PID
sleep 1.5
wait_socket_disappear "$SOCKET_FILE"
ls -lah "$RUNTIME_DIR"
cat "$RUNTIME_DIR"/desired.txt 
cat "$RUNTIME_DIR"/actual.txt
diff "$RUNTIME_DIR"/desired.txt "$RUNTIME_DIR"/actual.txt

#!/bin/bash

SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

SERVER_BIN=$SCRIPT_DIR/server
GENRECORD_BIN=$SCRIPT_DIR/generate_record
RUNTIME_DIR=$SCRIPT_DIR/run
SOCKET_FILE=$RUNTIME_DIR/server.sock
ACTUAL_FILE=$RUNTIME_DIR/actual.txt
DESIRED_FILE=$RUNTIME_DIR/desired.txt

function fatal {
    echo >&2 "$1"
    exit 1
}

if ! test -d "$RUNTIME_DIR"; then
    fatal "Run-time dir $RUNTIME_DIR not found."
fi

echo "$SERVER_BIN" "$SOCKET_FILE"
"$SERVER_BIN" "$SOCKET_FILE" >"$ACTUAL_FILE" &
SERVER_PID=$!

function stall { sleep 0.05; }

function wait_socket_exist {
    socket=$1
    for _ in {0..9}; do
        if [ -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket not found."
}

function wait_socket_disappear {
    socket=$1
    for _ in {0..9}; do
        if [ ! -S "$socket" ]; then
            return 0
        fi
        stall
    done
    fatal "Socket $socket not found."
}

wait_socket_exist "$SOCKET_FILE"

function proc_exist {
    pid=$1
    if kill -0 "$pid" 2>/dev/null; then
        return 0
    fi
    return 1
}

function wait_proc_exit {
    pid=$1
    for _ in {0..9}; do
        if ! proc_exist; then
            return 0
        fi
        stall
    done
    return 1
}

function terminate_process {
    pid=$1
    proc_exist "$pid" && kill -2 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
    proc_exist "$pid" && kill -9 "$pid" >/dev/null 2>&1 && wait_proc_exit "$pid"
}

function on_exit {
    terminate_process $SERVER_PID
    rm -f "$SOCKET_FILE" >/dev/null 2>&1
}
trap on_exit EXIT

(
    cd "$ASSETS_DIR" >/dev/null || exit 1

    $GENRECORD_BIN print-both 0 | nc -U "$SOCKET_FILE"
    $GENRECORD_BIN print-both 3 | nc -U "$SOCKET_FILE"
    $GENRECORD_BIN print-both 22 | nc -U "$SOCKET_FILE"

    {
        $GENRECORD_BIN print-both 0
        $GENRECORD_BIN print-both 3
        $GENRECORD_BIN print-both 22
    } | nc -U "$SOCKET_FILE"
)

cat >"$DESIRED_FILE" <<-EOM
begin -->
fetch_sock_path
server_new
server_uv_init
server_init
async_init
signal_init
signal_init
idle_init
client_init
server_bind_and_listen
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
server_on_connection_success
client_on_accept_success
alloc_record
client_on_recv_success
[0]()
free_record
alloc_record
client_on_recv_success
[3](Lor)
free_record
alloc_record
client_on_recv_success
[22](Lorem ipsum dolor sit )
free_record
alloc_record
client_on_recv_eof
close_socket
free_record
client_on_close
signal_cb
async_cb
close_socket
server_on_close
server_del
<-- end
EOM

sleep 0.5
terminate_process $SERVER_PID
wait_socket_disappear "$SOCKET_FILE"
diff "$RUNTIME_DIR"/desired.txt "$RUNTIME_DIR"/actual.txt
